PROGRAM 1
==============
Print Elements of Array
Difficulty: BasicAccuracy: 60.55%Submissions: 108K+Points: 1Average Time: 15m
Given an array arr[], print all its elements space-separated.

Note: You don't need to move to the next line after printing all elements of the array (space-separated)

Examples:

Input: arr[] = [1, 2, 3, 4, 5]
Output: 1 2 3 4 5
Input: arr[] = [2, 3, 5, 5]
Output: 2 3 5 5

Code :
// User function Template for Java

class Solution {
    // Just print the space seperated array elements
    void printArray(int arr[]) {
        //   code here
        int idx=arr.length;
        print(arr,idx,0);
    }
     void  print(int arr[],int idx,int i) {
        //   code here
        if(idx==i)
        {
            return ;
        }
       System.out.print(arr[i]+" ");
       print(arr,idx,i+1);
    }
}

==================
PROGRAM 2
===============
Tower Of Hanoi
Difficulty: MediumAccuracy: 35.23%Submissions: 169K+Points: 4
In the Tower of Hanoi puzzle, you are given n disks stacked in ascending order (smallest at the top) on the first of three rods. The goal is to move all disks to the third rod following two rules: only one disk can be moved at a time, and a disk can only be placed on top of a larger disk. Given the number of disks n and three rods labeled as from, to, and aux (starting rod, target rod, and auxiliary rod, respectively),  returns the total number of moves needed to transfer all disks from the starting rod to the target rod.

Examples:

Input: n = 2
Output: 3
Explanation: For n =2 , steps will be as follows in the example and total 3 steps will be taken.
move disk 1 from rod 1 to rod 2
move disk 2 from rod 1 to rod 3
move disk 1 from rod 2 to rod 3

PROGRAM
// User function Template for Java

class Solution {
    // Just print the space seperated array elements
    void printArray(int arr[]) {
        //   code here
        int idx=arr.length;
        print(arr,idx,0);
    }
     void  print(int arr[],int idx,int i) {
        //   code here
        if(idx==i)
        {
            return ;
        }
       System.out.print(arr[i]+" ");
       print(arr,idx,i+1);
    }
}
=================
PROGRAM 
=====================
Reverse an Array
Difficulty: EasyAccuracy: 55.32%Submissions: 189K+Points: 2Average Time: 5m
You are given an array of integers arr[]. Your task is to reverse the given array.

Note: Modify the array in place.

Examples:

Input: arr = [1, 4, 3, 2, 6, 5]
Output: [5, 6, 2, 3, 4, 1]
Explanation: The elements of the array are 1 4 3 2 6 5. After reversing the array, the first element goes to the last position, the second element goes to the second last position and so on. Hence, the answer is 5 6 2 3 4 1.

class Solution {
    public void reverseArray(int arr[]) {
        // code here
        int start=0;
        int end=arr.length-1;
        reverse(start,end,arr);
        return;
        
    }
    public void reverse(int start,int end,int arr[])
    {
        if(start >=  end)
        {
            return ;
        }
        int swap=arr[start];
        arr[start]= arr[end];
        arr[end]=swap;
        reverse(start+1 ,end-1,arr);
    }
}
=================
PROGRAM 
=====================

MAXIMUM OF ARRAY
class Solution {
    // Function to find max using recursion
    void max(int arr[]) {
        int result = print(arr, 0, Integer.MIN_VALUE); // Start from index 0, initial max is the lowest integer
        System.out.print(result); // Print the maximum value
    }

    int print(int arr[], int idx, int max) {
        if (idx >= arr.length) {
            return max; // Base case: return the max when end of array is reached
        }

        if (arr[idx] > max) {
            max = arr[idx]; // Update max if current element is greater
        }

        return print(arr, idx + 1, max); // Recursive call with next index
    }
}
====================
PROGRAM 
=====================


First and Last Occurrences
Difficulty: MediumAccuracy: 37.36%Submissions: 285K+Points: 4Average Time: 15m
Given a sorted array arr with possibly some duplicates, the task is to find the first and last occurrences of an element x in the given array.
Note: If the number x is not found in the array then return both the indices as -1.

Examples:

Input: arr[] = [1, 3, 5, 5, 5, 5, 67, 123, 125], x = 5
Output: [2, 5]
Explanation: First occurrence of 5 is at index 2 and last occurrence of 5 is at index 5
Input: arr[] = [1, 3, 5, 5, 5, 5, 7, 123, 125], x = 7
Output: [6, 6]
Explanation: First and last occurrence of 7 is at index 6
