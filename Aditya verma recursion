=========================
Sort an array
=======================
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {

        List<Integer> list = new ArrayList<>(Arrays.asList(2, 3, 1, 6, 5, 4));
        sort(list);
        System.out.println(list);
    }
    private static void sort( List<Integer> list)
    {
        if(list.size()==1)
        {
            return;
        }
        int temp=list.get(list.size()-1);
        list.remove(list.size()-1);
        sort(list);
        insert(list,temp);
    }
    public static void insert(List<Integer> list , int temp)
    {
        if(list.size()==0 || list.get(list.size()-1)<=temp)
        {
            list.add(temp);
            return ;
        }
        int ele=list.get(list.size()-1);
        list.remove(list.size()-1); 
        insert(list,temp);
        list.add(ele);
    }

}
==================================
Sort a stack
================================
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.*;
public class Main {
    public static void main(String[] args) {

       Stack<Integer> stack = new Stack<>();

        // Pushing 5 elements into the stack
        stack.push(110);
        stack.push(20);
        stack.push(30);
        stack.push(420);
        stack.push(50);

        sort(stack);
        System.out.println(stack);
    }
    private static void sort( Stack<Integer> st)
    {
      if(st.size()==1)
      {
          return;
      }
      int temp=st.peek();
      st.pop();
      sort(st);
      insert(st,temp);
    }
    public static void insert(Stack<Integer> st, int temp)
    {
        if(st.size()==0 || st.peek()<=temp)
        {
            st.push(temp);
            return;
        }
        int ele= st.peek();
        st.pop();
        insert(st,temp);
        st.push(ele);
    }

}

=========================================
Delete middle element of a  stack
==============================================
class Solution {
    // Function to delete middle element of a stack.
    public void deleteMid(Stack<Integer> s) {
        int k=(s.size()/2)+1;
        deleteMiddle(s,k);
        
    }
    public void deleteMiddle(Stack<Integer> s,int k){
        
        if(s.size()<=0)
        {
            return;
        }
        if(k==1)
        {
            s.pop();
            return;
        }
        int temp=s.pop();
        deleteMiddle(s,k-1);
        s.push(temp);
    }
}
=========================================
reverse stack
=========================================

class Solution {
    static void reverse(Stack<Integer> st) {
      if(st.size()==0)
      {
          return;
      }
      int temp=st.pop();
      reverse(st);
     insert(st,temp);
        
    }
    static void insert(Stack<Integer> st,int tmp) {
        if(st.size()==0)
        {
            st.push(tmp);
            return;
        }
        int curr=st.pop();
        insert(st,tmp);
        st.push(curr);
    }
}
==============================
kth grammar
=============================
class Solution {
    public int kthGrammar(int n, int k) {
        if(n==1 && k==1)
        {
            return 0;
        }
        int mid= (int)(Math.pow(2,n-1))/2;
        if(k<=mid)
        {
            return kthGrammar(n-1,k);
        } else
           return 1 - kthGrammar(n - 1, k - mid);

    }
}
===============================
Tower of hanoi
=============================
class Solution {
    public int towerOfHanoi(int n, int from, int to, int aux) {
        // code here
        if(n==1)
        {
            return 1;
        }
        int c1=towerOfHanoi(n-1,from,aux,to);
        
        int c2= towerOfHanoi(n-1,aux,to,from);
        return c1+c2+1;
    }
}
