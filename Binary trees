Binary tree constructor DISPLaying binary tree, size sum max height, Traversal of binary tree
==================================================================================================
import java.util.*;

public class Main {
    public static class Node {
        Node left;
        Node right;
        int data;

        public Node(int data, Node left, Node right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }
    public static int size(Node node)
    {
        if(node==null)
        {
            return 0;
        }
        int ls=size(node.left);
        int rs=size(node.right);
        int s=ls+rs+1;
        return s;
    }
    public static int sum(Node node)
    {
        if(node==null){
            return 0;
        }
        int ls=sum(node.left);
        int rs=sum(node.right);
        int s=ls+rs+node.data;
        return s;
    }
    public static int max(Node node)
    {
         if(node==null){
            return Integer.MIN_VALUE;
        }
        int ls=size(node.left);
        int rs=size(node.right);
        int max=Math.max(ls,rs);
         max=Math.max(max,node.data);
        return max;
    }
     public static int Height(Node node)
    {
        if(node==null){
            return -1;
        }
        int ls=Height(node.left);
        int rs=Height(node.right);
        int s=Math.max(ls,rs)+1;
        return s;
    }
    public static void Traversal(Node node)
    {
        if(node==null)
        {
            return;
        }
        System.out.println(node.data+" pre ");
        Traversal(node.left);
         System.out.println(node.data+" In ");
         Traversal(node.right);
         System.out.println(node.data+" post ");
    }
    public static class Pair {
        Node node;
        int state;

        public Pair(Node node, int state) {
            this.node = node;
            this.state = state;
        }
    }

    public static void display(Node node) {
        if (node == null) {
            return;
        }

        if (node.left != null) {
            System.out.print(node.left.data + " <- ");
        } else {
            System.out.print(". <- ");
        }

        System.out.print("node -> " + node.data);

        if (node.right != null) {
            System.out.print(" -> " + node.right.data);
        } else {
            System.out.print(" -> .");
        }

        System.out.println();

        display(node.left);
        display(node.right);
    }

    public static void main(String[] args) {
        Integer arr[] = {50, 25, 12, null, null, 37, 30, null, null, null, 75, 62, null, 70, null, 87, null, null};

        Node root = new Node(arr[0], null, null);
        Stack<Pair> st = new Stack<>();
        st.push(new Pair(root, 1));

        int i = 0;
        while (!st.isEmpty()) {
            Pair cp = st.peek();

            if (cp.state == 1) {
                i++;
                if (i < arr.length) {
                    if (arr[i] == null) {
                        cp.node.left = null;
                    } else {
                        Node node = new Node(arr[i], null, null);
                        cp.node.left = node;
                        st.push(new Pair(node, 1));
                    }
                }
                cp.state++;
            } else if (cp.state == 2) {
                i++;
                if (i < arr.length) {
                    if (arr[i] == null) {
                        cp.node.right = null;
                    } else {
                        Node node = new Node(arr[i], null, null);
                        cp.node.right = node;
                        st.push(new Pair(node, 1));
                    }
                }
                cp.state++;
            } else {
                st.pop();
            }
        }

        Traversal(root);
    }
}
