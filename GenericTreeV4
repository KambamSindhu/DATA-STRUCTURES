import java.util.*;
import java.io.*;
public class Main
{
   private static class Node{
        int data;
        ArrayList<Node> children=new ArrayList<>();
    }
    public static ArrayList<Integer> NodeToRoot(Node node,int data)
    {
        if(node.data==data)
        {
            ArrayList<Integer> list=new ArrayList<>();
            list.add(node.data);
            return list;
        }
        for(Node child:node.children)
        {
            ArrayList<Integer> lsf = NodeToRoot(child,data);
            if(lsf.size()>0)
            {
                lsf.add(node.data);
                return lsf;
            }
        }
        return new ArrayList<Integer>();
    }
    public static boolean findElement(Node node,int data)
    {
        if(node.data==data)
        {
            return true;
        }
        for(Node child:node.children)
        {
            boolean ans= findElement(child,data);
            if(ans)
            {
                return true;
            }
        }
        return false;
    }
    public static int lowestCommonAncestor(Node node,int d1,int d2)
    {
        ArrayList<Integer> l1= NodeToRoot(node,d1);
        ArrayList<Integer> l2= NodeToRoot(node,d2);
        
        int i=l1.size()-1;
        int j=l2.size()-1;
       while(i>=0 && j>=0 && l1.get(i)==l2.get(j))
       {
           i--;
           j--;
       }
       i++;
       j++;
       return l1.get(i);
    }
     public static int distanceBetweenNodes(Node node,int d1,int d2)
    {
        ArrayList<Integer> l1= NodeToRoot(node,d1);
        ArrayList<Integer> l2= NodeToRoot(node,d2);
        
        int i=l1.size()-1;
        int j=l2.size()-1;
       while(i>=0 && j>=0 && l1.get(i)==l2.get(j))
       {
           i--;
           j--;
       }
       i++;
       j++;
       return i+j;
    }
    public static boolean similarShapeTrees(Node n1,Node n2)
    {
        if(n1.children.size()!=n2.children.size())
        {
            return false;
        }
       for(int i=0;i<n1.children.size();i++)
       {
           Node c1=n1.children.get(i);
           Node c2=n2.children.get(i);
           if(similarShapeTrees(c1,c2)==false)
           {
               return false;
           }
       }
       return true;
    }
   public static boolean mirrorTrees(Node n1, Node n2) {
    if (n1.children.size() != n2.children.size()) {
        return false;
    }

    for (int i = 0; i < n1.children.size(); i++) {
        int j = n2.children.size() - 1 - i;  // ðŸ‘ˆ mirror index
        Node c1 = n1.children.get(i);
        Node c2 = n2.children.get(j);

        if (!mirrorTrees(c1, c2)) {  // ðŸ‘ˆ recursive call on children
            return false;
        }
    }

    return true;
}
	public static void main(String[] args) {
	  int arr[] = {10, 20, 50, -1, 60, -1, -1, 30, 70, -1, 80, 110, -1, 120, -1, -1, 90, -1, -1, 40, 100, -1, -1, -1};
        int arr1[] = { 1, 2, 5, -1, 6, -1, -1,  3, 7, -1, 8, 11, -1, 12, -1, -1, 9, -1, -1,  4, 10, -1, -1, -1};
      int mirrorArr[] = {  1, 4, 10, -1, -1,  3, 9, -1, 8, 12, -1, 11, -1, -1, 7, -1, -1,  2, 6, -1, 5, -1, -1, -1};

        Node root=null;
         Stack<Node> st=new Stack<>();
         for(int i=0;i<arr.length;i++)
         {
             if(arr[i]==-1)
             {
                 st.pop();
             }
             else{
                 Node node=new Node();
                 node.data=arr[i];
                 if(st.isEmpty())
                 {
                     root=node;
                 }else{
                     st.peek().children.add(node);
                 }
                 st.push(node);
             }
         }
         System.out.println(findElement(root,100));
          System.out.println();
         ArrayList<Integer> nodeToRootPath= NodeToRoot(root,100);
         for(int i=0;i<nodeToRootPath.size();i++)
         {
             System.out.print(nodeToRootPath.get(i)+" ");
            
         }
          System.out.println();
          System.out.println(lowestCommonAncestor(root,100,10));

          System.out.println(distanceBetweenNodes(root,100,10));
          Node root2=construct(arr1);
           System.out.println(similarShapeTrees(root,root2));
            Node root3=construct(mirrorArr);
           System.out.println(mirrorTrees(root,root3));
	}
	public static Node construct(int[] arr) {
    Node root = null;
    Stack<Node> st = new Stack<>();

    for (int val : arr) {
        if (val == -1) {
            st.pop();
        } else {
            Node node = new Node();
            node.data = val;

            if (!st.isEmpty()) {
                st.peek().children.add(node);
            } else {
                root = node;
            }

            st.push(node);
        }
    }
    return root;
}
}
